# -*- coding: utf-8 -*-

from framework.api.external import filesystem as _fs
from framework.api.external import rendering as _rendering

from framework.contexts import models as _models
from framework.contexts.logger import Logger as _log
from framework.contexts.meta import Meta as _meta

import os.path

__all__ = [
    "Post"
]

class AsciiDoc:
    def __init__(self, out):
        self.out = out

    def __del__(self):
        self.out.close()

    def set_metadata(self, data, suffix="\n"):
        for key, value in data.items():
            self.out.write(":{}: {}\n".format(key, value))

        self.out.write(suffix)

    def heading(self, content, level=1, suffix="\n\n"):
        self.out.write("{} {}{}".format("=" * level, content.capitalize(), suffix))
    
    def content(self, content, suffix="\n\n"):
        self.out.write("{}{}".format(content, suffix))

    def list(self, content, prefix=None, suffix="\n"):
        if prefix:
            self.out.write("{}\n\n".format(prefix.capitalize()))

        for item in content:
            self.out.write("* {}\n".format(item))

        self.out.write(suffix)

class Post(_models.Post):
    __author__ = "sk4la"
    __description__ = "AsciiDoc postprocessing module."
    __license__ = "GNU GPLv3 <https://github.com/sk4la/plast/blob/master/LICENSE>"
    __maintainer__ = ["sk4la"]
    __system__ = ["Darwin", "Linux", "Windows"]
    __version__ = "0.1"

    def _generate_report(self):
        self._asciidoc.heading("Analysis report", suffix="\n")
        self._asciidoc.set_metadata({
            "author": _meta.__package__,
            "date": _rendering.timestamp(),
            "version": "0.1"
        })

        self._asciidoc.heading("Preamble", level=2)
        self._asciidoc.content("This is a sample report generated by the AsciiDoc postprocessing module.")

        self._asciidoc.heading("Match(es)", level=2)
        self._asciidoc.list(["`{}` [`{}`]".format(match["target"]["identifier"], match["match"]["rule"]) for match in _rendering.iterate_matches(self.case.resources["matches"])], prefix="Below are listed the evidence(s) that have matched one or several YARA rules:")

        self._asciidoc.heading("Interpretation", level=2)
        self._asciidoc.content("This report itself provides no tangible proof that the analyzed evidence(s) are compromised in any way. Further analysis must be conducted to confirm this hypothesis.", suffix="\n")

    def run(self, case):
        self.case = case
        self.case.resources["report"] = os.path.join(self.case.resources["case"], "reports", "report.adoc")

        if not os.path.isdir(os.path.dirname(self.case.resources["report"])):
            _fs.create_local_directory(os.path.dirname(self.case.resources["report"]))

        try:
            self._asciidoc = AsciiDoc(open(self.case.resources["report"], "a"))
            _log.debug("Report anchored to <{}>.".format(self.case.resources["report"]))

        except Exception:
            _log.error("Failed to open the output stream to <{}>".format(self.case.resources["report"]))
            return

        self._generate_report()
